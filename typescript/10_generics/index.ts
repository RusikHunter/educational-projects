// üîπ –ß—Ç–æ —Ç–∞–∫–æ–µ Generics ?
//     Generics(–æ–±–æ–±—â—ë–Ω–Ω—ã–µ —Ç–∏–ø—ã) –ø–æ–∑–≤–æ–ª—è—é—Ç –ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏, –∫–ª–∞—Å—Å—ã –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏, –Ω–µ —Ç–µ—Ä—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∏—Ö.

// üì¶ –≠—Ç–æ –∫–∞–∫ ¬´—à–∞–±–ª–æ–Ω¬ª —Ç–∏–ø–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏.

// –±–µ–∑ generics

// function identity(value: any): any {
//     return value
// }

function identity<T>(value: T): T {
    return value
}

let result = identity("test")

interface ApiResponse<T> {
    data: T
    success: boolean
}

const userResponse: ApiResponse<{ name: string }> = {
    data: { name: "Alice" },
    success: true
}

class Box<T> {
    content: T
    constructor(value: T) {
        this.content = value
    }
}

const numberBox = new Box<number>(123)
const stringBox = new Box("hello")

function getLength<T extends { length: number }>(item: T): number {
    return item.length
}

getLength("hello")        // OK
getLength([1, 2, 3])      // OK
// getLength(123) // ‚ùå –û—à–∏–±–∫–∞: —É number –Ω–µ—Ç length




function pair<K, V>(key: K, value: V): { key: K; value: V } {
    return { key, value }
}

const user = pair("id", 123) // { key: string; value: number }

type Nullable<T> = T | null

const name1: Nullable<string> = "Alice"
const age: Nullable<number> = null

function pickProperty<T, K extends keyof T>(obj: T, key: K): T[K] {
    return obj[key]
}

const user123 = { id: 1, name: "Bob" };
const userName = pickProperty(user123, "name") // string

// practice

function firstElement<T>(arr: T[]): T | undefined {
    return arr[0]
}